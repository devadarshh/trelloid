// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String        @id @default(cuid())
  clerkId        String        @unique
  email          String        @unique
  firstName      String?
  lastName       String?
  imageUrl       String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  
  organizationId String?
  organization   Organization? @relation(fields: [organizationId], references: [id])
  auditLogs      AuditLog[] // New field to link AuditLog to User
}

model Organization {
  id              String   @id @default(cuid()) 
  organizationId  String   @unique           
  name            String
  organizationImage String  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  users           User[]
  boards          Board[]
  orgLimit        OrgLimit? // New relation field
  orgSubscription OrgSubscription? // New relation field
}

model Board {


  id String @id @default(uuid())
  organizationId String

  title String
  imageId String
  imageThumbUrl String @db.Text
  imageFullUrl String @db.Text
  imageLinkHTML String @db.Text

  list  List[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  organization  Organization @relation(fields: [organizationId], references: [organizationId])
}

model List {
    id                  String @id @default(uuid())
    title               String
   order               Int
   boardId            String
    board              Board @relation(fields: [boardId], references: [id],onDelete: Cascade)
      cards               Card[]
     createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Card {
  id                  String @id @default(uuid())
  title               String
  description         String? @db.Text
  order               Int

  listId              String
  list                List   @relation(fields: [listId], references: [id], onDelete: Cascade)

  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@index([listId])
}
enum ACTION {
  CREATE
  UPDATE
  DELETE
}

enum ENTITY_TYPE {
  BOARD
  LIST
  CARD
}

model AuditLog {
  id                  String  @id @default(uuid())
  orgId               String
  action              ACTION
  entityId            String
  entityType          ENTITY_TYPE
  entityTitle         String
  userId              String // Foreign key field
  user                User    @relation(fields: [userId], references: [id]) // Relation field
  userImage           String @db.Text
  userName            String @db.Text

  createdAt           DateTime @default(now())
  updatedAt           DateTime  @updatedAt

}
model OrgLimit {
  id                  String @id @default(uuid())
  orgId               String @unique
  count               Int @default(0)

  createdAt           DateTime @default(now())
  updatedAt           DateTime  @updatedAt


  organization        Organization @relation(fields: [orgId], references: [organizationId])
}

model OrgSubscription {
  id                  String @id @default(uuid())
  orgId               String @unique

  stripeCustomerId            String? @unique @map(name: "stripe_customer_id")
  stripeSubscriptionId        String? @unique @map(name: "stripe_subscription_id")
  stripePriceId               String? @map(name: "stripe_price_id")
  stripeCurrentPeriodEnd      DateTime? @map(name: "stripe_current_period_end")

  organization        Organization @relation(fields: [orgId], references: [organizationId])
}